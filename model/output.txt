=======================================================================
C:\ABS\Projects\pathology-server\model\agents.js

const mongoose = require("mongoose");
const Schema = mongoose.Schema;

const agentSchema = new Schema({
  name: { type: String, required: true },
  email: { type: String, required: true },
  contact: { type: String, required: true },
  location: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Location",
    required: true,
  },
  franchise: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Franchise",
    required: true,
  },
});

module.exports = mongoose.model("Agent", agentSchema);


=======================================================================
C:\ABS\Projects\pathology-server\model\appointment.js

const mongoose = require("mongoose");
const crypto = require("node:crypto");

const generateTicket = () => crypto.randomBytes(3).toString("hex");

const testSchema = new mongoose.Schema({
  test: { type: mongoose.Schema.Types.ObjectId, ref: "Test" },
  status: {
    type: String,
    enum: ["Pending", "In Progress", "Completed", "Closed"],
    default: "Pending",
  },
  updatedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
  },
  updatedAt: {
    type: Date,
  },
});

const labSchema = new mongoose.Schema({
  lab: { type: mongoose.Schema.Types.ObjectId, ref: "Lab", required: true },
  tests: [testSchema],
});

const commissionSchema = new mongoose.Schema({
  superAdminToFranchise: { type: Number, min: 0, max: 100, default: 20 },
  superAdminToAgent: { type: Number, min: 0, max: 100, default: 20 },
});

const appointmentSchema = new mongoose.Schema(
  {
    type: { type: String, required: true },
    age: { type: Number, required: true },
    gender: { type: String, required: true },
    problem: { type: String, required: true },
    problemDescription: { type: String },
    referral: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Agent",
    },
    labs: labSchema,
    status: {
      type: String,
      enum: ["Pending", "Approve", "Reject"],
      default: "Pending",
    },
    appointmentDate: { type: Date, required: true },
    ticket: { type: String, default: generateTicket },
    createdBy: {
      type: mongoose.Schema.Types.ObjectId,
      refPath: "createdByModel",
    },
    createdByModel: {
      type: String,
      enum: ["User", "Agent", "Franchise", "SuperAdmin"],
    },
    commission: {
      type: commissionSchema,
      default: () => ({}),
    },
  },
  { timestamps: true }
);

appointmentSchema.virtual("hasTestsInProgress").get(function () {
  return this.labs.some((lab) =>
    lab.tests.some((test) => test.status === "In Progress")
  );
});

const Appointment = mongoose.model("Appointment", appointmentSchema);
module.exports = Appointment;


=======================================================================
C:\ABS\Projects\pathology-server\model\diagnosticLabs.js

const mongoose = require("mongoose");
const DiagnosticLabSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
  },
  name: {
    type: String,
    required: true,
  },
  address: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Location",
    required: true,
  },
  contactNumber: {
    type: String,
    required: true,
  },
  image: {
    type: String,
  },
  isLabLogIn: {
    type: Boolean,
    default: false,
  },
  testsOffered: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "DiagnosticTest",
    },
  ],
});

const DiagnosticLab = mongoose.model("DiagnosticLab", DiagnosticLabSchema);

module.exports = DiagnosticLab;


=======================================================================
C:\ABS\Projects\pathology-server\model\diagnosticTest.js

const mongoose = require("mongoose");

const DiagnosticTestSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  image: {
    type: String,
  },
  description: {
    type: String,
    // required: true,
  },
  price: {
    type: Number,
    required: true,
  },
});

const DiagnosticTest = mongoose.model("DiagnosticTest", DiagnosticTestSchema);

module.exports = DiagnosticTest;


=======================================================================
C:\ABS\Projects\pathology-server\model\franchise.js

const mongoose = require("mongoose");

const franchiseSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
    },
    contactNumber: {
      type: String,
      required: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
    },
    password: {
      type: String,
    },
    location: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Location",
      // required: true,
    },
    role: { type: String, default: "franchise" },
    createdBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
    },
    lastLogin: { type: Date },
    lastLogout: { type: Date },
  },
  { timestamps: true }
);

const Franchise = mongoose.model("Franchise", franchiseSchema);

module.exports = Franchise;


=======================================================================
C:\ABS\Projects\pathology-server\model\location.js

const mongoose = require("mongoose");
const Schema = mongoose.Schema;

const locationSchema = new Schema({
  address: { type: String },
  city: { type: String },
  state: { type: String },
  pinCode: { type: String },
});

module.exports = mongoose.model("Location", locationSchema);


=======================================================================
C:\ABS\Projects\pathology-server\model\userModel.js

const mongoose = require("mongoose");

const User = new mongoose.Schema(
  {
    name: {
      type: String,
      // required: true,
      immutable: true,
    },
    mobile: {
      type: String,
      required: true,
      unique: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
    },
    password: { type: String, required: true },
    otp: {
      type: String,
      required: true,
    },
    role: {
      type: String,
      enum: ["user", "franchise", "agent", "councilor", "superAdmin"],
      default: "user",
    },
    assignedCounselor: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      default: null,
    },
    adminDetails: {
      type: mongoose.Schema.Types.Mixed,
      default: {},
    },
    lastLogin: { type: Date },
    lastLogout: { type: Date },
  },
  { timestamps: true }
);

module.exports = mongoose.model("User", User);


